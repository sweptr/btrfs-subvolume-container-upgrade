#!/bin/bash
# Requires: btrfs-progs, chroot
# Prerequisites: seperate boot partition
# Usage: update-container {update,revert}

LOCK_FILE=".container-lock"
FSROOT_DEV="/dev/sda1"
FSROOT="/var/lib/fsroot"
KERNEL="linux"
PREFIX="#"
A="A"
B="B"
C="C"
R="REVERT"
T="TEMP"
SUBVOLUME_A="$PREFIX$A"
SUBVOLUME_B="$PREFIX$B"
SUBVOLUME_C="$PREFIX$C"
SUBVOLUME_REVERT="$PREFIX$R"
SUBVOLUME_TEMP="$PREFIX$T"
CACHE_DIR="var/cache/pacman/pkg"

function pause() {
	read -p "$*"
}

function unmount() {
	if [[ $(mountpoint -q "$1") ]]
	then
		local STATUS=$(umount --recursive "$1")
	fi
	echo "$STATUS"
}

function kernel_copy() {
	if [[ "revert" == "$" ]]
	then
		echo ":: Reverting kernel upgrade"
		/usr/bin/cp "/boot/$B-vmlinuz-$KERNEL" "/boot/vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL.img" "/boot/initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL-fallback.img" "/boot/initramfs-$KERNEL-fallback.img"
		/usr/bin/cp "/boot/$C-vmlinuz-$KERNEL" "/boot/$B-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$C-initramfs-$KERNEL.img" "/boot/$B-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$C-initramfs-$KERNEL-fallback.img" "/boot/$B-initramfs-$KERNEL-fallback.img"
	else
		/usr/bin/cp "/boot/$B-vmlinuz-$KERNEL" "/boot/$C-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL.img" "/boot/$C-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL-fallback.img" "/boot/$C-initramfs-$KERNEL-fallback.img"
		/usr/bin/cp "/boot/vmlinuz-$KERNEL" "/boot/$B-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/initramfs-$KERNEL.img" "/boot/$B-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/initramfs-$KERNEL-fallback.img" "/boot/$B-initramfs-$KERNEL-fallback.img"
	fi
}

function clean_up() {
	echo ":: Cleaning up..."
	# delete temp snapshot
	if [[ -e "$FSROOT/$SUBVOLUME_TEMP" ]]
	then
		# check for kernel upgrade and revert
		if [[ $(/usr/bin/pacman -Q "$KERNEL") != $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_TEMP") ]]
		then
			kernel_copy "revert"
		fi

		unmount "$FSROOT/$SUBVOLUME_TEMP/proc"
		unmount "$FSROOT/$SUBVOLUME_TEMP/sys"
		unmount "$FSROOT/$SUBVOLUME_TEMP/dev"
		unmount "$FSROOT/$SUBVOLUME_TEMP/run"
		unmount "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"

		echo ":: Deleting temporary subvolume"
		/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_TEMP"
	fi

	# delete lockfiles
	if [[ -e "$FSROOT/$SUBVOLUME_A/$LOCK_FILE" ]]
	then
		rm "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"
	fi

	echo ":: Done"
	exit 1
}

function try() {
	"$@"
	local STATUS="$?"
	if [[ 0 -ne "$STATUS" ]]
	then
		echo ":: Error with $1"
		clean_up
	fi
	return "$STATUS"
}

function revert() {
	echo ":: Reverting..."
	pause "*** Press return to continue or C-c to exit ***"

	# check for kernel upgrade and revert
	if [[ $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_B") != $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_A") ]]
	then
		kernel_copy "revert"
	fi

	# delete reverted backup
	if [[ -e "$FSROOT/$SUBVOLUME_REVERT" ]]
	then
		/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_REVERT"
	fi

	# revert upgrade
	mv "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_REVERT"
	mv "$FSROOT/$SUBVOLUME_B" "$FSROOT/$SUBVOLUME_A"
	mv "$FSROOT/$SUBVOLUME_C" "$FSROOT/$SUBVOLUME_B"
	exit 0
}

function mount() {
	# test if $FSROOT is mounted, mount if not
	/usr/bin/mountpoint -q "$FSROOT"
	if [[ 0 -ne "$?" ]]
	then
		# not mounted, fix that
		try /usr/bin/mount -o subvolid=0 "$FSROOT_DEV $FSROOT"
	fi
}

function update() {
	# catch user break
	trap clean_up SIGINT SIGTERM

	# check for lockfile
	if [[ ! -e "$FSROOT/$SUBVOLUME_A/$LOCK_FILE" ]]
	then
		# set lockfile
		touch "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"

		# snapshot primary subvolume to temporary subvolume
		try /usr/bin/btrfs subvolume snapshot "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_TEMP"

		# let em know it's started
		echo ":: Checking for updates..."

		# check if there are any updates to be processed
		local UPDATES=$(/usr/bin/checkupdates)

		# if we have updates
		if [[ -n "$UPDATES" ]]
		then
			echo ":: Updates available..."

			# backup kernel for rollback if update exists
			if [[ -n $(echo "$UPDATES" | /usr/bin/grep -w "$KERNEL") ]]
			then
				echo ":: Kernel update available, creating backup of kernel..."

				# mount boot to the temp subvolume
				try /usr/bin/mount -o bind /boot "$FSROOT/$SUBVOLUME_TEMP/boot"
				kernel_copy
			fi

			if [[ 0 -eq $(mountpoint -q "/$CACHE_DIR") ]]
			then
				try /usr/bin/mount -o bind "/$CACHE_DIR" "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"
			fi

			# upgrade the container
			# /usr/bin/arch-chroot "$FSROOT/$SUBVOLUME_TEMP" /usr/bin/pacman -Syu

			# use chroot directly because arch-chroot is being strange and blanking our mounts
			try /usr/bin/mount -t proc proc "$FSROOT/$SUBVOLUME_TEMP/proc"
			try /usr/bin/mount --rbind /sys "$FSROOT/$SUBVOLUME_TEMP/sys"
			try /usr/bin/mount --rbind /dev "$FSROOT/$SUBVOLUME_TEMP/dev"
			try /usr/bin/mount --rbind /run "$FSROOT/$SUBVOLUME_TEMP/run"

			try /usr/bin/chroot "$FSROOT/$SUBVOLUME_TEMP" pacman -Syu

			local UPDATE="$?"

			# backup all the downloaded packages to the existing live system
			/usr/bin/cp -u --reflink "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR/*" "$FSROOT/$SUBVOLUME_A/$CACHE_DIR"

			unmount "$FSROOT/$SUBVOLUME_TEMP/proc"
			unmount "$FSROOT/$SUBVOLUME_TEMP/sys"
			unmount "$FSROOT/$SUBVOLUME_TEMP/dev"
			unmount "$FSROOT/$SUBVOLUME_TEMP/run"
			unmount "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"

			# if pacman succeeded in updating the system
			if [[ 0 -eq "$UPDATE" ]]
			then
				# delete old backup
				/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_C"

				if [[ ! -e "$FSROOT/$SUBVOLUME_C" ]]
				then
					# rotate subvolumes so that $SUBVOLUME_B is our target to revert to if needed
					mv "$FSROOT/$SUBVOLUME_B" "$FSROOT/$SUBVOLUME_C"
					mv "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_B"
					mv "$FSROOT/$SUBVOLUME_TEMP" "$FSROOT/$SUBVOLUME_A"

					# remove lock files
					rm "$FSROOT/$SUBVOLUME_B/$LOCK_FILE"
					rm "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"
					echo ":: Your system is now up to date, please reboot into the updated system"
					exit 0
				fi
			else
				echo ":: *** Failed to update ***"
				# clean up
				clean_up
			fi
		else
			# No updates available
			echo ":: No updates available."
			exit 0
		fi
	else
		echo ":: Prior upgrade was not completed"
		exit 1
	fi
}

function init() {
	mount

	case "$1" in
		"revert")
			echo ":: Reverting prior upgrade"
			revert
			;;
		"update")
			echo ":: Updating system"
			update
			;;
		*)
			echo ":: Usage: update-container {update, revert}"
			;;
	esac
}

init "$1"
