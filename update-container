#!/bin/bash
# Requires: btrfs-progs
# Prerequisites: seperate boot partition
# Usage: update-container {update,revert}
# Flow:
#      In-place update:
#                        * snapshot SUBVOLUME_A to SUBVOLUME_TEMP
#                        * update SUBVOLUME_A
#                        * delete SUBVOLUME_C
#                        * move SUBVOLUME_B to SUBVOLUME_C
#                        * move SUBVOLUME_TEMP to SUBVOLUME_B
#
#      Container update:
#                        * snapshot SUBVOLUME_A to SUBVOLUME_TEMP
#                        * chroot update SUBVOLUME_TEMP
#                        * delete SUBVOLUME_C
#                        * move SUBVOLUME_B to SUBVOLUME_C
#                        * move SUBVOLUME_A to SUBVOLUME_B
#                        * move SUBVOLUME_TEMP to SUBVOLUME_A
# Please see config.sample for an example config which must reside in the directory the script lives.

function check() {
	if [[ "$(id -u)" != "0" ]]
	then
		echo " error: You cannot perform this operation unless you are root."
		exit 1
	fi
}

function load_config() {
	# get my pwd even if called from a symlink http://stackoverflow.com/a/246128
	# resolve $SOURCE until the file is no longer a symlink
	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]
	do
		DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
		SOURCE="$(readlink "$SOURCE")"

		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
		if [[ $SOURCE != /* ]]
		then
			SOURCE="$DIR/$SOURCE"
		fi
	done

	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	if [[ -r "$DIR/config" ]]
	then
		source "$DIR/config"
	else
		echo " error: No config found!"
		exit 0
	fi
}

function pause() {
	read -p ":: Continue? [y/N] " -n 1 -r
	echo
	if [[ "$REPLY" =~ ^[Yy]$ ]]
	then
		return
	else
		clean_up
	fi
}

function unmount() {
	/usr/bin/mountpoint -q "$1"
	if [[ 0 -eq "$?" ]]
	then
		local STATUS=$(umount --recursive "$1")
	fi
}

function kernel_copy() {
	if [[ "revert" == "$1" ]]
	then
		echo ":: Reverting kernel upgrade"
		/usr/bin/cp "/boot/$B-vmlinuz-$KERNEL" "/boot/vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL.img" "/boot/initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL-fallback.img" "/boot/initramfs-$KERNEL-fallback.img"
		/usr/bin/cp "/boot/$C-vmlinuz-$KERNEL" "/boot/$B-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$C-initramfs-$KERNEL.img" "/boot/$B-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$C-initramfs-$KERNEL-fallback.img" "/boot/$B-initramfs-$KERNEL-fallback.img"
	else
		/usr/bin/cp "/boot/$B-vmlinuz-$KERNEL" "/boot/$C-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL.img" "/boot/$C-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/$B-initramfs-$KERNEL-fallback.img" "/boot/$C-initramfs-$KERNEL-fallback.img"
		/usr/bin/cp "/boot/vmlinuz-$KERNEL" "/boot/$B-vmlinuz-$KERNEL"
		/usr/bin/cp "/boot/initramfs-$KERNEL.img" "/boot/$B-initramfs-$KERNEL.img"
		/usr/bin/cp "/boot/initramfs-$KERNEL-fallback.img" "/boot/$B-initramfs-$KERNEL-fallback.img"
	fi
}

function clean_up() {
	local MESSAGE="$1"
	if [[ -z "$MESSAGE" ]]
	then
		MESSAGE="C-c caught"
	fi

	echo ":: $MESSAGE, Cleaning up..."
	# delete temp snapshot
	if [[ -e "$FSROOT/$SUBVOLUME_TEMP" ]]
	then
		# check for kernel upgrade and revert
		if [[ $(/usr/bin/pacman -Q "$KERNEL") != $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_TEMP") ]]
		then
			kernel_copy "revert"
		fi

		unmount "$FSROOT/$SUBVOLUME_TEMP/boot"
		unmount "$FSROOT/$SUBVOLUME_TEMP/proc"
		unmount "$FSROOT/$SUBVOLUME_TEMP/sys"
		unmount "$FSROOT/$SUBVOLUME_TEMP/dev"
		unmount "$FSROOT/$SUBVOLUME_TEMP/run"
		unmount "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"

		echo ":: Deleting temporary subvolume"
		/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_TEMP"
	fi

	# delete lockfiles
	if [[ -e "$FSROOT/$SUBVOLUME_A/$LOCK_FILE" ]]
	then
		/usr/bin/rm "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"
	fi

	exit 0
}

function try() {
	"$@"
	local STATUS="$?"
	if [[ 0 -ne "$STATUS" ]]
	then
		clean_up "Error with $1"
	fi
	return "$STATUS"
}

function revert() {
	echo ":: Reverting..."
	pause

	# check for kernel upgrade and revert
	if [[ $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_B") != $(/usr/bin/pacman -Q "$KERNEL" --root "$FSROOT/$SUBVOLUME_A") ]]
	then
		kernel_copy "revert"
	fi

	# delete reverted backup
	if [[ -e "$FSROOT/$SUBVOLUME_REVERT" ]]
	then
		/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_REVERT"
	fi

	# revert upgrade
	/usr/bin/mv "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_REVERT"
	/usr/bin/mv "$FSROOT/$SUBVOLUME_B" "$FSROOT/$SUBVOLUME_A"
	/usr/bin/mv "$FSROOT/$SUBVOLUME_C" "$FSROOT/$SUBVOLUME_B"
	exit 0
}

function mount() {
	# test if $FSROOT is mounted, mount if not
	/usr/bin/mountpoint -q "$FSROOT"
	if [[ 0 -ne "$?" ]]
	then
		# not mounted, fix that
		try /usr/bin/mount -o subvolid=0 "$FSROOT_DEV $FSROOT"
	fi
}

function update() {
	# catch user break
	trap clean_up SIGINT SIGTERM

	# check for lockfile
	if [[ ! -e "$FSROOT/$SUBVOLUME_A/$LOCK_FILE" ]]
	then
		# set lockfile
		touch "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"

		# check if there are any updates to be processed
		local UPDATES=$(/usr/bin/checkupdates)

		# if we have updates
		if [[ -n "$UPDATES" ]]
		then
			echo ":: Updates available..."

			# snapshot primary subvolume to temporary subvolume
			try /usr/bin/btrfs subvolume snapshot "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_TEMP"

			for UPDATE in $(echo "$UPDATES")
			do
				for PACKAGE in "${PACKAGES[@]}"
				do
					if [[ "$UPDATE" == "$PACKAGE" ]]
					then
						local UPDATE_SNAPSHOT="true"
					fi
				done
			done

			if [[ -n "$UPDATE_SNAPSHOT" ]]
			then
				echo ":: Updating container"
				pause

				# backup kernel for rollback if update exists
				if [[ -n $(echo "$UPDATES" | /usr/bin/grep "^$KERNEL$") ]]
				then
					echo ":: Kernel update available, creating backup of kernel..."

					# mount boot to the temp subvolume
					try /usr/bin/mount -o bind /boot "$FSROOT/$SUBVOLUME_TEMP/boot"
					kernel_copy
				fi

				/usr/bin/mountpoint -q "/$CACHE_DIR"
				if [[ 0 -eq "$?" ]]
				then
					local SCACHE_DIR="true"
					try /usr/bin/mount -o bind "/$CACHE_DIR" "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"
				fi


				try /usr/bin/mount -o bind /proc "$FSROOT/$SUBVOLUME_TEMP/proc"
				try /usr/bin/mount -o bind  /dev "$FSROOT/$SUBVOLUME_TEMP/dev"

				try /usr/bin/pacman -Syu -r "$FSROOT/$SUBVOLUME_TEMP"

				local UPDATE="$?"

				# backup all the downloaded packages to the existing live system
				if [[ -z "$SCACHE_DIR" ]]
				then
					/usr/bin/cp -u --reflink "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR/*" "$FSROOT/$SUBVOLUME_A/$CACHE_DIR"
				fi

				unmount "$FSROOT/$SUBVOLUME_TEMP/proc"
				unmount "$FSROOT/$SUBVOLUME_TEMP/dev"
				unmount "$FSROOT/$SUBVOLUME_TEMP/boot"
				unmount "$FSROOT/$SUBVOLUME_TEMP/$CACHE_DIR"

			else
				# update current system
				echo ":: Updating live system"
				try /usr/bin/pacman -Syu
				local UPDATE="$?"
			fi

			# if pacman succeeded in updating the system
			if [[ 0 -eq "$UPDATE" ]]
			then
				# delete old backup
				/usr/bin/btrfs subvolume delete "$FSROOT/$SUBVOLUME_C"

				if [[ ! -e "$FSROOT/$SUBVOLUME_C" ]]
				then
					# rotate subvolumes so that $SUBVOLUME_B is our target to revert to if needed
					/usr/bin/mv "$FSROOT/$SUBVOLUME_B" "$FSROOT/$SUBVOLUME_C"

					if [[ -n "$UPDATE_SNAPSHOT" ]]
					then
						/usr/bin/mv "$FSROOT/$SUBVOLUME_A" "$FSROOT/$SUBVOLUME_B"
						/usr/bin/mv "$FSROOT/$SUBVOLUME_TEMP" "$FSROOT/$SUBVOLUME_A"
						local MESSAGE=":: Your system is now up to date, please reboot to finish the upgrade"
					else
						/usr/bin/mv "$FSROOT/$SUBVOLUME_TEMP" "$FSROOT/$SUBVOLUME_B"
						local MESSAGE=":: Update complete"
					fi

					# remove lock files
					/usr/bin/rm "$FSROOT/$SUBVOLUME_B/$LOCK_FILE"
					/usr/bin/rm "$FSROOT/$SUBVOLUME_A/$LOCK_FILE"

					echo "$MESSAGE"
				fi
			else
				# failed to update
				clean_up "*** Failed to update ***"
			fi
		else
			# No updates available
			clean_up "No updates available"
		fi
	else
		echo ":: Prior upgrade was not completed"
		exit 1
	fi
}

function init() {
	check
	load_config
	mount

	case "$1" in
		"revert")
			echo ":: Reverting prior upgrade..."
			revert
			;;
		"update")
			echo ":: Checking for updates..."
			update
			;;
		*)
			echo ":: Usage: update-container [update, revert] package(s)"
			;;
	esac
}

init "$1"
